---
import '@pagefind/default-ui/css/ui.css';
import { useTranslations } from '../utils/translations';
import Icon from '../user-components/Icon.astro';

interface Props {
	locale: string | undefined;
}

const t = useTranslations(Astro.props.locale);
const pagefindTranslations = {
	placeholder: t('search.label'),
	...Object.fromEntries(
		Object.entries(t.pick('pagefind.')).map(([key, value]) => [key.replace('pagefind.', ''), value])
	),
};
---

<site-search data-translations={JSON.stringify(pagefindTranslations)}>
	<button
		class="hidden md:flex w-96 dark:text-white items-center space-x-2 py-2 bg-zinc-200/60 dark:bg-zinc-800/80 rounded-lg px-3 border-transparent hover:border-zinc-400 dark:hover:border-zinc-600 border transition-colors ease-out"
		data-open-modal
		disabled
	>
		{
			/* The span is `aria-hidden` because it is not shown on small screens. Instead, the icon label is used for accessibility purposes. */
		}
		<Icon name="magnifier" label={t('search.label')} />
		<span class="flex-1 text-left max-w-lg" aria-hidden="true">{t('search.label')}</span>
		<Icon name="forward-slash" label={t('search.shortcutLabel')} />
	</button>

	<dialog style="padding:0" aria-label={t('search.label')}>
		<div class="dialog-frame sl-flex">
			{
				/* TODO: Make the layout of this button flexible to accommodate different word lengths. Currently hard-coded for English: “Cancel” */
			}
			<button data-close-modal class="sl-flex md:sl-hidden">
				{t('search.cancelLabel')}
			</button>
			{
				import.meta.env.DEV ? (
					<div style="margin: auto; text-align: center; white-space: pre-line;" dir="ltr">
						<p>{t('search.devWarning')}</p>
					</div>
				) : (
					<div class="search-container">
						<div id="starlight__search" />
					</div>
				)
			}
		</div>
	</dialog>
</site-search>

<style is:global>
	[data-search-modal-open] {
		overflow: hidden;
	}
</style>

<script>
	class SiteSearch extends HTMLElement {
		constructor() {
			super();
			const openBtn = this.querySelector<HTMLButtonElement>('button[data-open-modal]')!;
			const closeBtn = this.querySelector<HTMLButtonElement>('button[data-close-modal]')!;
			const dialog = this.querySelector('dialog')!;
			const dialogFrame = this.querySelector('.dialog-frame')!;

			/** Close the modal if a user clicks on a link or outside of the modal. */
			const onClick = (event: MouseEvent) => {
				const isLink = 'href' in (event.target || {});
				if (
					isLink ||
					(document.body.contains(event.target as Node) &&
						!dialogFrame.contains(event.target as Node))
				) {
					closeModal();
				}
			};

			const openModal = (event?: MouseEvent) => {
				dialog.showModal();
				document.body.toggleAttribute('data-search-modal-open', true);
				this.querySelector('input')?.focus();
				event?.stopPropagation();
				window.addEventListener('click', onClick);
			};

			const closeModal = () => dialog.close();

			openBtn.addEventListener('click', openModal);
			openBtn.disabled = false;
			closeBtn.addEventListener('click', closeModal);

			dialog.addEventListener('close', () => {
				document.body.toggleAttribute('data-search-modal-open', false);
				window.removeEventListener('click', onClick);
			});

			// Listen for `/` and `cmd + k` keyboard shortcuts.
			window.addEventListener('keydown', (e) => {
				const isInput =
					document.activeElement &&
					['input', 'select', 'textarea'].includes(document.activeElement.tagName.toLowerCase());
				if (e.metaKey === true && e.key === 'k') {
					dialog.open ? closeModal() : openModal();
					e.preventDefault();
				} else if (e.key === '/' && !dialog.open && !isInput) {
					openModal();
					e.preventDefault();
				}
			});

			let translations = {};
			try {
				translations = JSON.parse(this.dataset.translations || '{}');
			} catch {}

			window.addEventListener('DOMContentLoaded', () => {
				if (import.meta.env.DEV) return;
				const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
				onIdle(async () => {
					const { PagefindUI } = await import('@pagefind/default-ui');
					new PagefindUI({
						element: '#starlight__search',
						baseUrl: import.meta.env.BASE_URL,
						bundlePath: import.meta.env.BASE_URL.replace(/\/$/, '') + '/pagefind/',
						showImages: false,
						translations,
						showSubResults: true,
					});
				});
			});
		}
	}
	customElements.define('site-search', SiteSearch);
</script>
