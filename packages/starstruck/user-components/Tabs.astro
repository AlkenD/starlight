---
import Icon from './Icon.astro';
import { processPanels } from './rehype-tabs';

const panelHtml = await Astro.slots.render('default');
const { html, panels } = processPanels(panelHtml);
---

<starstruck-tabs
	class="not-prose border border-zinc-500/50 rounded-xl flex flex-col justify-center"
>
	{
		panels && (
			<div class="p-4 flex justify-between items-center">
				<ul class="flex space-x-2" role="tablist">
					{panels.map(({ label, panelId, tabId }, idx) => (
						<li role="presentation">
							<a
								class="px-2 py-1 rounded-md"
								role="tab"
								href={'#' + panelId}
								id={tabId}
								aria-selected={idx === 0 && 'true'}
								tabindex={idx !== 0 ? -1 : 0}
							>
								{label}
							</a>
						</li>
					))}
				</ul>
				<button
					id="copy-button"
					class="hover:bg-zinc-500/50 active:bg-zinc-500/40 p-1 rounded-md transition-all ease-out"
				>
					<Icon fillNone size="1.5rem" name="copy" />
				</button>
			</div>
		)
	}
	<div class="h-[1px] w-full bg-zinc-500/50"></div>
	<Fragment set:html={html} />
</starstruck-tabs>

<style>
	[aria-selected='true'] {
		@apply dark:bg-white dark:text-black text-white bg-black;
	}
</style>

<script>
	const tabContent = document.getElementById('tab-content');
	const copyButton = document.getElementById('copy-button')!;

	copyButton.addEventListener('click', function () {
		const contentToCopy = tabContent?.textContent || '';

		navigator.clipboard
			.writeText(contentToCopy)
			.then(() => {})
			.catch((error) => {
				console.error('Copy failed: ', error);
			});
	});

	class StarstruckTabs extends HTMLElement {
		tabs: HTMLAnchorElement[];
		panels: HTMLElement[];

		constructor() {
			super();
			const tablist = this.querySelector<HTMLUListElement>('[role="tablist"]')!;
			this.tabs = [...tablist.querySelectorAll<HTMLAnchorElement>('[role="tab"]')];
			this.panels = [...this.querySelectorAll<HTMLElement>(':scope > [role="tabpanel"]')];

			this.tabs.forEach((tab, i) => {
				// Handle clicks for mouse users
				tab.addEventListener('click', (e) => {
					e.preventDefault();
					const currentTab = tablist.querySelector('[aria-selected]');
					if (e.currentTarget !== currentTab) {
						this.switchTab(e.currentTarget as HTMLAnchorElement, i);
					}
				});

				// Handle keyboard input
				tab.addEventListener('keydown', (e) => {
					const index = this.tabs.indexOf(e.currentTarget as any);
					// Work out which key the user is pressing and
					// Calculate the new tab's index where appropriate
					const nextIndex =
						e.key === 'ArrowLeft'
							? index - 1
							: e.key === 'ArrowRight'
							? index + 1
							: e.key === 'Home'
							? 0
							: e.key === 'End'
							? this.tabs.length - 1
							: null;
					if (nextIndex === null) return;
					if (this.tabs[nextIndex]) {
						e.preventDefault();
						this.switchTab(this.tabs[nextIndex], nextIndex);
					}
				});
			});
		}

		switchTab(newTab: HTMLAnchorElement | null | undefined, index: number) {
			if (!newTab) return;

			// Mark all tabs as unselected and hide all tab panels.
			this.tabs.forEach((tab) => {
				tab.removeAttribute('aria-selected');
				tab.setAttribute('tabindex', '-1');
			});
			this.panels.forEach((oldPanel) => {
				oldPanel.hidden = true;
			});

			// Show new panel and mark new tab as selected.
			const newPanel = this.panels[index];
			if (newPanel) newPanel.hidden = false;
			// Restore active tab to the default tab order.
			newTab.removeAttribute('tabindex');
			newTab.setAttribute('aria-selected', 'true');
			newTab.focus();
		}
	}

	customElements.define('starstruck-tabs', StarstruckTabs);
</script>
