---
import config from 'virtual:starlight/user-config';
import type { MarkdownHeading } from 'astro';
import { getSidebar } from '../utils/navigation';
import type { Route } from '../utils/routing';

// Components â€” can override built-in CSS, but not user CSS.
import ContentPanel from '../components/ContentPanel.astro';
import FallbackContentNotice from '../components/FallbackContentNotice.astro';
import Footer from '../components/Footer.astro';
import HeadSEO from '../components/HeadSEO.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import MarkdownContent from '../components/MarkdownContent.astro';
import RightSidebar from '../components/RightSidebar.astro';
import Sidebar from '../components/Sidebar.astro';
import SkipLink from '../components/SkipLink.astro';
import ThemeProvider from '../components/ThemeProvider.astro';
import PageFrame from '../layout/PageFrame.astro';
import TwoColumnContent from '../layout/TwoColumnContent.astro';
import Banner from '../components/Banner.astro';

// Remark component CSS (needs to override `MarkdownContent.astro`)
import '../style/asides.css';

// Important that this is the last import so it can override built-in styles.
import 'virtual:starlight/user-css';

type Props = Route & { headings: MarkdownHeading[] };

const { dir, entry, entryMeta, headings, isFallback, lang, locale } = Astro.props;
const sidebar = getSidebar(Astro.url.pathname, locale);

const hasSidebar = entry.data.template !== 'splash';
const tocConfig = !hasSidebar
	? false
	: entry.data.tableOfContents !== undefined
	? entry.data.tableOfContents
	: config.tableOfContents;
const hasToC = Boolean(tocConfig);
const hasHero = Boolean(entry.data.hero);
const pagefindEnabled =
	entry.slug !== '404' && !entry.slug.endsWith('/404') && entry.data.pagefind !== false;
---

<html
	lang={lang}
	dir={dir}
	data-has-toc={hasToC}
	data-has-sidebar={hasSidebar}
	data-has-hero={hasHero}
>
	<head>
		<HeadSEO data={entry.data} lang={lang} />
	</head>
	<body
		class="bg-no-repeat bg-cover bg-white dark:bg-black dark:text-white"
		style=`background-image: url(${entry.data.background?.file.src})`
	>
		<ThemeProvider />
		<SkipLink {locale} />
		<PageFrame {locale} {hasSidebar}>
			<Header slot="header" {locale} />
			{hasSidebar && <Sidebar slot="sidebar" {sidebar} {locale} />}
			<TwoColumnContent {hasToC}>
				<RightSidebar slot="right-sidebar" {headings} {locale} {tocConfig} />
				<main data-pagefind-body={pagefindEnabled} lang={entryMeta.lang} dir={entryMeta.dir}>
					{/* TODO: Revisit how this logic flows. */}
					{entry.data.banner && <Banner {...entry.data.banner} />}
					{
						entry.data.hero ? (
							<ContentPanel>
								<Hero hero={entry.data.hero} fallbackTitle={entry.data.title} />
								<MarkdownContent>
									<slot />
								</MarkdownContent>
							</ContentPanel>
						) : (
							<>
								<ContentPanel>
									<h1 id="_top" data-page-title>
										{entry.data.title}
									</h1>
									{isFallback && <FallbackContentNotice {locale} />}
								</ContentPanel>
								<ContentPanel>
									<MarkdownContent>
										<slot />
									</MarkdownContent>
									<Footer {...{ entry, dir, lang, locale, sidebar }} />
								</ContentPanel>
							</>
						)
					}
				</main>
			</TwoColumnContent>
		</PageFrame>
	</body>
</html>
